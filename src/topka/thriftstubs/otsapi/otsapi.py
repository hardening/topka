#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from zope.interface import Interface, implementer
from twisted.internet import defer
from thrift.transport import TTwisted
all_structs = []


class Iface(Interface):
    def getVersionInfo(versionInfo):
        """
        Parameters:
         - versionInfo
        """
        pass

    def logonConnection(username, password, domain):
        """
        Parameters:
         - username
         - password
         - domain
        """
        pass

    def getPermissionForToken(authToken):
        """
        Parameters:
         - authToken
        """
        pass

    def logoffConnection(authToken):
        """
        Parameters:
         - authToken
        """
        pass

    def ping(input):
        """
        Parameters:
         - input
        """
        pass

    def virtualChannelOpen(authToken, sessionId, virtualName, isDynChannel, flags):
        """
        Parameters:
         - authToken
         - sessionId
         - virtualName
         - isDynChannel
         - flags
        """
        pass

    def virtualChannelClose(authToken, sessionId, virtualName, instance):
        """
        Parameters:
         - authToken
         - sessionId
         - virtualName
         - instance
        """
        pass

    def disconnectSession(authToken, sessionId, wait):
        """
        Parameters:
         - authToken
         - sessionId
         - wait
        """
        pass

    def logoffSession(authToken, sessionId, wait):
        """
        Parameters:
         - authToken
         - sessionId
         - wait
        """
        pass

    def enumerateSessions(authToken, Version):
        """
        Parameters:
         - authToken
         - Version
        """
        pass

    def querySessionInformation(authToken, sessionId, infoClass):
        """
        Parameters:
         - authToken
         - sessionId
         - infoClass
        """
        pass

    def startRemoteControlSession(authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers, flags):
        """
        Parameters:
         - authToken
         - sourceLogonId
         - targetLogonId
         - HotkeyVk
         - HotkeyModifiers
         - flags
        """
        pass

    def stopRemoteControlSession(authToken, sourceLogonId, targetLogonId):
        """
        Parameters:
         - authToken
         - sourceLogonId
         - targetLogonId
        """
        pass

    def sendMessage(authToken, sessionId, title, message, style, timeout, wait):
        """
        Parameters:
         - authToken
         - sessionId
         - title
         - message
         - style
         - timeout
         - wait
        """
        pass


@implementer(Iface)
class Client(object):

    def __init__(self, transport, oprot_factory):
        self._transport = transport
        self._oprot_factory = oprot_factory
        self._seqid = 0
        self._reqs = {}

    def getVersionInfo(self, versionInfo):
        """
        Parameters:
         - versionInfo
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_getVersionInfo, versionInfo)
        d.addCallbacks(
            callback=self.cb_send_getVersionInfo,
            callbackArgs=(seqid,),
            errback=self.eb_send_getVersionInfo,
            errbackArgs=(seqid,))
        return d

    def cb_send_getVersionInfo(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_getVersionInfo(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_getVersionInfo(self, versionInfo):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getVersionInfo', TMessageType.CALL, self._seqid)
        args = getVersionInfo_args()
        args.versionInfo = versionInfo
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getVersionInfo(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = getVersionInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getVersionInfo failed: unknown result"))

    def logonConnection(self, username, password, domain):
        """
        Parameters:
         - username
         - password
         - domain
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_logonConnection, username, password, domain)
        d.addCallbacks(
            callback=self.cb_send_logonConnection,
            callbackArgs=(seqid,),
            errback=self.eb_send_logonConnection,
            errbackArgs=(seqid,))
        return d

    def cb_send_logonConnection(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_logonConnection(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_logonConnection(self, username, password, domain):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('logonConnection', TMessageType.CALL, self._seqid)
        args = logonConnection_args()
        args.username = username
        args.password = password
        args.domain = domain
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_logonConnection(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = logonConnection_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "logonConnection failed: unknown result"))

    def getPermissionForToken(self, authToken):
        """
        Parameters:
         - authToken
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_getPermissionForToken, authToken)
        d.addCallbacks(
            callback=self.cb_send_getPermissionForToken,
            callbackArgs=(seqid,),
            errback=self.eb_send_getPermissionForToken,
            errbackArgs=(seqid,))
        return d

    def cb_send_getPermissionForToken(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_getPermissionForToken(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_getPermissionForToken(self, authToken):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getPermissionForToken', TMessageType.CALL, self._seqid)
        args = getPermissionForToken_args()
        args.authToken = authToken
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getPermissionForToken(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = getPermissionForToken_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getPermissionForToken failed: unknown result"))

    def logoffConnection(self, authToken):
        """
        Parameters:
         - authToken
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_logoffConnection, authToken)
        d.addCallbacks(
            callback=self.cb_send_logoffConnection,
            callbackArgs=(seqid,),
            errback=self.eb_send_logoffConnection,
            errbackArgs=(seqid,))
        return d

    def cb_send_logoffConnection(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_logoffConnection(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_logoffConnection(self, authToken):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('logoffConnection', TMessageType.CALL, self._seqid)
        args = logoffConnection_args()
        args.authToken = authToken
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_logoffConnection(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = logoffConnection_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "logoffConnection failed: unknown result"))

    def ping(self, input):
        """
        Parameters:
         - input
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_ping, input)
        d.addCallbacks(
            callback=self.cb_send_ping,
            callbackArgs=(seqid,),
            errback=self.eb_send_ping,
            errbackArgs=(seqid,))
        return d

    def cb_send_ping(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_ping(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_ping(self, input):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
        args = ping_args()
        args.input = input
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_ping(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = ping_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result"))

    def virtualChannelOpen(self, authToken, sessionId, virtualName, isDynChannel, flags):
        """
        Parameters:
         - authToken
         - sessionId
         - virtualName
         - isDynChannel
         - flags
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_virtualChannelOpen, authToken, sessionId, virtualName, isDynChannel, flags)
        d.addCallbacks(
            callback=self.cb_send_virtualChannelOpen,
            callbackArgs=(seqid,),
            errback=self.eb_send_virtualChannelOpen,
            errbackArgs=(seqid,))
        return d

    def cb_send_virtualChannelOpen(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_virtualChannelOpen(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_virtualChannelOpen(self, authToken, sessionId, virtualName, isDynChannel, flags):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('virtualChannelOpen', TMessageType.CALL, self._seqid)
        args = virtualChannelOpen_args()
        args.authToken = authToken
        args.sessionId = sessionId
        args.virtualName = virtualName
        args.isDynChannel = isDynChannel
        args.flags = flags
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_virtualChannelOpen(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = virtualChannelOpen_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "virtualChannelOpen failed: unknown result"))

    def virtualChannelClose(self, authToken, sessionId, virtualName, instance):
        """
        Parameters:
         - authToken
         - sessionId
         - virtualName
         - instance
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_virtualChannelClose, authToken, sessionId, virtualName, instance)
        d.addCallbacks(
            callback=self.cb_send_virtualChannelClose,
            callbackArgs=(seqid,),
            errback=self.eb_send_virtualChannelClose,
            errbackArgs=(seqid,))
        return d

    def cb_send_virtualChannelClose(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_virtualChannelClose(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_virtualChannelClose(self, authToken, sessionId, virtualName, instance):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('virtualChannelClose', TMessageType.CALL, self._seqid)
        args = virtualChannelClose_args()
        args.authToken = authToken
        args.sessionId = sessionId
        args.virtualName = virtualName
        args.instance = instance
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_virtualChannelClose(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = virtualChannelClose_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "virtualChannelClose failed: unknown result"))

    def disconnectSession(self, authToken, sessionId, wait):
        """
        Parameters:
         - authToken
         - sessionId
         - wait
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_disconnectSession, authToken, sessionId, wait)
        d.addCallbacks(
            callback=self.cb_send_disconnectSession,
            callbackArgs=(seqid,),
            errback=self.eb_send_disconnectSession,
            errbackArgs=(seqid,))
        return d

    def cb_send_disconnectSession(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_disconnectSession(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_disconnectSession(self, authToken, sessionId, wait):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('disconnectSession', TMessageType.CALL, self._seqid)
        args = disconnectSession_args()
        args.authToken = authToken
        args.sessionId = sessionId
        args.wait = wait
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_disconnectSession(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = disconnectSession_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "disconnectSession failed: unknown result"))

    def logoffSession(self, authToken, sessionId, wait):
        """
        Parameters:
         - authToken
         - sessionId
         - wait
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_logoffSession, authToken, sessionId, wait)
        d.addCallbacks(
            callback=self.cb_send_logoffSession,
            callbackArgs=(seqid,),
            errback=self.eb_send_logoffSession,
            errbackArgs=(seqid,))
        return d

    def cb_send_logoffSession(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_logoffSession(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_logoffSession(self, authToken, sessionId, wait):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('logoffSession', TMessageType.CALL, self._seqid)
        args = logoffSession_args()
        args.authToken = authToken
        args.sessionId = sessionId
        args.wait = wait
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_logoffSession(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = logoffSession_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "logoffSession failed: unknown result"))

    def enumerateSessions(self, authToken, Version):
        """
        Parameters:
         - authToken
         - Version
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_enumerateSessions, authToken, Version)
        d.addCallbacks(
            callback=self.cb_send_enumerateSessions,
            callbackArgs=(seqid,),
            errback=self.eb_send_enumerateSessions,
            errbackArgs=(seqid,))
        return d

    def cb_send_enumerateSessions(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_enumerateSessions(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_enumerateSessions(self, authToken, Version):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('enumerateSessions', TMessageType.CALL, self._seqid)
        args = enumerateSessions_args()
        args.authToken = authToken
        args.Version = Version
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_enumerateSessions(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = enumerateSessions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "enumerateSessions failed: unknown result"))

    def querySessionInformation(self, authToken, sessionId, infoClass):
        """
        Parameters:
         - authToken
         - sessionId
         - infoClass
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_querySessionInformation, authToken, sessionId, infoClass)
        d.addCallbacks(
            callback=self.cb_send_querySessionInformation,
            callbackArgs=(seqid,),
            errback=self.eb_send_querySessionInformation,
            errbackArgs=(seqid,))
        return d

    def cb_send_querySessionInformation(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_querySessionInformation(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_querySessionInformation(self, authToken, sessionId, infoClass):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('querySessionInformation', TMessageType.CALL, self._seqid)
        args = querySessionInformation_args()
        args.authToken = authToken
        args.sessionId = sessionId
        args.infoClass = infoClass
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_querySessionInformation(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = querySessionInformation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "querySessionInformation failed: unknown result"))

    def startRemoteControlSession(self, authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers, flags):
        """
        Parameters:
         - authToken
         - sourceLogonId
         - targetLogonId
         - HotkeyVk
         - HotkeyModifiers
         - flags
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_startRemoteControlSession, authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers, flags)
        d.addCallbacks(
            callback=self.cb_send_startRemoteControlSession,
            callbackArgs=(seqid,),
            errback=self.eb_send_startRemoteControlSession,
            errbackArgs=(seqid,))
        return d

    def cb_send_startRemoteControlSession(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_startRemoteControlSession(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_startRemoteControlSession(self, authToken, sourceLogonId, targetLogonId, HotkeyVk, HotkeyModifiers, flags):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('startRemoteControlSession', TMessageType.CALL, self._seqid)
        args = startRemoteControlSession_args()
        args.authToken = authToken
        args.sourceLogonId = sourceLogonId
        args.targetLogonId = targetLogonId
        args.HotkeyVk = HotkeyVk
        args.HotkeyModifiers = HotkeyModifiers
        args.flags = flags
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_startRemoteControlSession(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = startRemoteControlSession_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "startRemoteControlSession failed: unknown result"))

    def stopRemoteControlSession(self, authToken, sourceLogonId, targetLogonId):
        """
        Parameters:
         - authToken
         - sourceLogonId
         - targetLogonId
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_stopRemoteControlSession, authToken, sourceLogonId, targetLogonId)
        d.addCallbacks(
            callback=self.cb_send_stopRemoteControlSession,
            callbackArgs=(seqid,),
            errback=self.eb_send_stopRemoteControlSession,
            errbackArgs=(seqid,))
        return d

    def cb_send_stopRemoteControlSession(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_stopRemoteControlSession(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_stopRemoteControlSession(self, authToken, sourceLogonId, targetLogonId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('stopRemoteControlSession', TMessageType.CALL, self._seqid)
        args = stopRemoteControlSession_args()
        args.authToken = authToken
        args.sourceLogonId = sourceLogonId
        args.targetLogonId = targetLogonId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_stopRemoteControlSession(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = stopRemoteControlSession_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "stopRemoteControlSession failed: unknown result"))

    def sendMessage(self, authToken, sessionId, title, message, style, timeout, wait):
        """
        Parameters:
         - authToken
         - sessionId
         - title
         - message
         - style
         - timeout
         - wait
        """
        seqid = self._seqid = self._seqid + 1
        self._reqs[seqid] = defer.Deferred()

        d = defer.maybeDeferred(self.send_sendMessage, authToken, sessionId, title, message, style, timeout, wait)
        d.addCallbacks(
            callback=self.cb_send_sendMessage,
            callbackArgs=(seqid,),
            errback=self.eb_send_sendMessage,
            errbackArgs=(seqid,))
        return d

    def cb_send_sendMessage(self, _, seqid):
        return self._reqs[seqid]

    def eb_send_sendMessage(self, f, seqid):
        d = self._reqs.pop(seqid)
        d.errback(f)
        return d

    def send_sendMessage(self, authToken, sessionId, title, message, style, timeout, wait):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sendMessage', TMessageType.CALL, self._seqid)
        args = sendMessage_args()
        args.authToken = authToken
        args.sessionId = sessionId
        args.title = title
        args.message = message
        args.style = style
        args.timeout = timeout
        args.wait = wait
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sendMessage(self, iprot, mtype, rseqid):
        d = self._reqs.pop(rseqid)
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            return d.errback(x)
        result = sendMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return d.callback(result.success)
        return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "sendMessage failed: unknown result"))


@implementer(Iface)
class Processor(TProcessor):
    def __init__(self, handler):
        self._handler = Iface(handler)
        self._processMap = {}
        self._processMap["getVersionInfo"] = Processor.process_getVersionInfo
        self._processMap["logonConnection"] = Processor.process_logonConnection
        self._processMap["getPermissionForToken"] = Processor.process_getPermissionForToken
        self._processMap["logoffConnection"] = Processor.process_logoffConnection
        self._processMap["ping"] = Processor.process_ping
        self._processMap["virtualChannelOpen"] = Processor.process_virtualChannelOpen
        self._processMap["virtualChannelClose"] = Processor.process_virtualChannelClose
        self._processMap["disconnectSession"] = Processor.process_disconnectSession
        self._processMap["logoffSession"] = Processor.process_logoffSession
        self._processMap["enumerateSessions"] = Processor.process_enumerateSessions
        self._processMap["querySessionInformation"] = Processor.process_querySessionInformation
        self._processMap["startRemoteControlSession"] = Processor.process_startRemoteControlSession
        self._processMap["stopRemoteControlSession"] = Processor.process_stopRemoteControlSession
        self._processMap["sendMessage"] = Processor.process_sendMessage

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return defer.succeed(None)
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    def process_getVersionInfo(self, seqid, iprot, oprot):
        args = getVersionInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getVersionInfo_result()
        d = defer.maybeDeferred(self._handler.getVersionInfo, args.versionInfo)
        d.addCallback(self.write_results_success_getVersionInfo, result, seqid, oprot)
        d.addErrback(self.write_results_exception_getVersionInfo, result, seqid, oprot)
        return d

    def write_results_success_getVersionInfo(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("getVersionInfo", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_getVersionInfo(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getVersionInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_logonConnection(self, seqid, iprot, oprot):
        args = logonConnection_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = logonConnection_result()
        d = defer.maybeDeferred(self._handler.logonConnection, args.username, args.password, args.domain)
        d.addCallback(self.write_results_success_logonConnection, result, seqid, oprot)
        d.addErrback(self.write_results_exception_logonConnection, result, seqid, oprot)
        return d

    def write_results_success_logonConnection(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("logonConnection", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_logonConnection(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("logonConnection", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPermissionForToken(self, seqid, iprot, oprot):
        args = getPermissionForToken_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPermissionForToken_result()
        d = defer.maybeDeferred(self._handler.getPermissionForToken, args.authToken)
        d.addCallback(self.write_results_success_getPermissionForToken, result, seqid, oprot)
        d.addErrback(self.write_results_exception_getPermissionForToken, result, seqid, oprot)
        return d

    def write_results_success_getPermissionForToken(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("getPermissionForToken", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_getPermissionForToken(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPermissionForToken", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_logoffConnection(self, seqid, iprot, oprot):
        args = logoffConnection_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = logoffConnection_result()
        d = defer.maybeDeferred(self._handler.logoffConnection, args.authToken)
        d.addCallback(self.write_results_success_logoffConnection, result, seqid, oprot)
        d.addErrback(self.write_results_exception_logoffConnection, result, seqid, oprot)
        return d

    def write_results_success_logoffConnection(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("logoffConnection", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_logoffConnection(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("logoffConnection", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ping(self, seqid, iprot, oprot):
        args = ping_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ping_result()
        d = defer.maybeDeferred(self._handler.ping, args.input)
        d.addCallback(self.write_results_success_ping, result, seqid, oprot)
        d.addErrback(self.write_results_exception_ping, result, seqid, oprot)
        return d

    def write_results_success_ping(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_ping(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ping", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_virtualChannelOpen(self, seqid, iprot, oprot):
        args = virtualChannelOpen_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = virtualChannelOpen_result()
        d = defer.maybeDeferred(self._handler.virtualChannelOpen, args.authToken, args.sessionId, args.virtualName, args.isDynChannel, args.flags)
        d.addCallback(self.write_results_success_virtualChannelOpen, result, seqid, oprot)
        d.addErrback(self.write_results_exception_virtualChannelOpen, result, seqid, oprot)
        return d

    def write_results_success_virtualChannelOpen(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("virtualChannelOpen", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_virtualChannelOpen(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("virtualChannelOpen", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_virtualChannelClose(self, seqid, iprot, oprot):
        args = virtualChannelClose_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = virtualChannelClose_result()
        d = defer.maybeDeferred(self._handler.virtualChannelClose, args.authToken, args.sessionId, args.virtualName, args.instance)
        d.addCallback(self.write_results_success_virtualChannelClose, result, seqid, oprot)
        d.addErrback(self.write_results_exception_virtualChannelClose, result, seqid, oprot)
        return d

    def write_results_success_virtualChannelClose(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("virtualChannelClose", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_virtualChannelClose(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("virtualChannelClose", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_disconnectSession(self, seqid, iprot, oprot):
        args = disconnectSession_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = disconnectSession_result()
        d = defer.maybeDeferred(self._handler.disconnectSession, args.authToken, args.sessionId, args.wait)
        d.addCallback(self.write_results_success_disconnectSession, result, seqid, oprot)
        d.addErrback(self.write_results_exception_disconnectSession, result, seqid, oprot)
        return d

    def write_results_success_disconnectSession(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("disconnectSession", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_disconnectSession(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("disconnectSession", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_logoffSession(self, seqid, iprot, oprot):
        args = logoffSession_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = logoffSession_result()
        d = defer.maybeDeferred(self._handler.logoffSession, args.authToken, args.sessionId, args.wait)
        d.addCallback(self.write_results_success_logoffSession, result, seqid, oprot)
        d.addErrback(self.write_results_exception_logoffSession, result, seqid, oprot)
        return d

    def write_results_success_logoffSession(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("logoffSession", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_logoffSession(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("logoffSession", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_enumerateSessions(self, seqid, iprot, oprot):
        args = enumerateSessions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = enumerateSessions_result()
        d = defer.maybeDeferred(self._handler.enumerateSessions, args.authToken, args.Version)
        d.addCallback(self.write_results_success_enumerateSessions, result, seqid, oprot)
        d.addErrback(self.write_results_exception_enumerateSessions, result, seqid, oprot)
        return d

    def write_results_success_enumerateSessions(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("enumerateSessions", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_enumerateSessions(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("enumerateSessions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_querySessionInformation(self, seqid, iprot, oprot):
        args = querySessionInformation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = querySessionInformation_result()
        d = defer.maybeDeferred(self._handler.querySessionInformation, args.authToken, args.sessionId, args.infoClass)
        d.addCallback(self.write_results_success_querySessionInformation, result, seqid, oprot)
        d.addErrback(self.write_results_exception_querySessionInformation, result, seqid, oprot)
        return d

    def write_results_success_querySessionInformation(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("querySessionInformation", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_querySessionInformation(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("querySessionInformation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_startRemoteControlSession(self, seqid, iprot, oprot):
        args = startRemoteControlSession_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = startRemoteControlSession_result()
        d = defer.maybeDeferred(self._handler.startRemoteControlSession, args.authToken, args.sourceLogonId, args.targetLogonId, args.HotkeyVk, args.HotkeyModifiers, args.flags)
        d.addCallback(self.write_results_success_startRemoteControlSession, result, seqid, oprot)
        d.addErrback(self.write_results_exception_startRemoteControlSession, result, seqid, oprot)
        return d

    def write_results_success_startRemoteControlSession(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("startRemoteControlSession", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_startRemoteControlSession(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("startRemoteControlSession", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stopRemoteControlSession(self, seqid, iprot, oprot):
        args = stopRemoteControlSession_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stopRemoteControlSession_result()
        d = defer.maybeDeferred(self._handler.stopRemoteControlSession, args.authToken, args.sourceLogonId, args.targetLogonId)
        d.addCallback(self.write_results_success_stopRemoteControlSession, result, seqid, oprot)
        d.addErrback(self.write_results_exception_stopRemoteControlSession, result, seqid, oprot)
        return d

    def write_results_success_stopRemoteControlSession(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("stopRemoteControlSession", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_stopRemoteControlSession(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stopRemoteControlSession", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sendMessage(self, seqid, iprot, oprot):
        args = sendMessage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendMessage_result()
        d = defer.maybeDeferred(self._handler.sendMessage, args.authToken, args.sessionId, args.title, args.message, args.style, args.timeout, args.wait)
        d.addCallback(self.write_results_success_sendMessage, result, seqid, oprot)
        d.addErrback(self.write_results_exception_sendMessage, result, seqid, oprot)
        return d

    def write_results_success_sendMessage(self, success, result, seqid, oprot):
        result.success = success
        oprot.writeMessageBegin("sendMessage", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def write_results_exception_sendMessage(self, error, result, seqid, oprot):
        msg_type = TMessageType.REPLY
        try:
            error.raiseException()
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sendMessage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getVersionInfo_args(object):
    """
    Attributes:
     - versionInfo
    """


    def __init__(self, versionInfo=None,):
        self.versionInfo = versionInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.versionInfo = TVersion()
                    self.versionInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getVersionInfo_args')
        if self.versionInfo is not None:
            oprot.writeFieldBegin('versionInfo', TType.STRUCT, 1)
            self.versionInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getVersionInfo_args)
getVersionInfo_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'versionInfo', [TVersion, None], None, ),  # 1
)


class getVersionInfo_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TVersion()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getVersionInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getVersionInfo_result)
getVersionInfo_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TVersion, None], None, ),  # 0
)


class logonConnection_args(object):
    """
    Attributes:
     - username
     - password
     - domain
    """


    def __init__(self, username=None, password=None, domain=None,):
        self.username = username
        self.password = password
        self.domain = domain

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logonConnection_args')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 3)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logonConnection_args)
logonConnection_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'domain', 'UTF8', None, ),  # 3
)


class logonConnection_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TReturnLogonConnection()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logonConnection_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logonConnection_result)
logonConnection_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TReturnLogonConnection, None], None, ),  # 0
)


class getPermissionForToken_args(object):
    """
    Attributes:
     - authToken
    """


    def __init__(self, authToken=None,):
        self.authToken = authToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPermissionForToken_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPermissionForToken_args)
getPermissionForToken_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
)


class getPermissionForToken_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPermissionForToken_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPermissionForToken_result)
getPermissionForToken_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class logoffConnection_args(object):
    """
    Attributes:
     - authToken
    """


    def __init__(self, authToken=None,):
        self.authToken = authToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logoffConnection_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logoffConnection_args)
logoffConnection_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
)


class logoffConnection_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logoffConnection_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logoffConnection_result)
logoffConnection_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class ping_args(object):
    """
    Attributes:
     - input
    """


    def __init__(self, input=None,):
        self.input = input

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.input = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_args')
        if self.input is not None:
            oprot.writeFieldBegin('input', TType.I32, 1)
            oprot.writeI32(self.input)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_args)
ping_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'input', None, None, ),  # 1
)


class ping_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_result)
ping_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class virtualChannelOpen_args(object):
    """
    Attributes:
     - authToken
     - sessionId
     - virtualName
     - isDynChannel
     - flags
    """


    def __init__(self, authToken=None, sessionId=None, virtualName=None, isDynChannel=None, flags=None,):
        self.authToken = authToken
        self.sessionId = sessionId
        self.virtualName = virtualName
        self.isDynChannel = isDynChannel
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.virtualName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isDynChannel = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('virtualChannelOpen_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 2)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.virtualName is not None:
            oprot.writeFieldBegin('virtualName', TType.STRING, 3)
            oprot.writeString(self.virtualName.encode('utf-8') if sys.version_info[0] == 2 else self.virtualName)
            oprot.writeFieldEnd()
        if self.isDynChannel is not None:
            oprot.writeFieldBegin('isDynChannel', TType.BOOL, 4)
            oprot.writeBool(self.isDynChannel)
            oprot.writeFieldEnd()
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 5)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(virtualChannelOpen_args)
virtualChannelOpen_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sessionId', None, None, ),  # 2
    (3, TType.STRING, 'virtualName', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'isDynChannel', None, None, ),  # 4
    (5, TType.I32, 'flags', None, None, ),  # 5
)


class virtualChannelOpen_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TReturnVirtualChannelOpen()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('virtualChannelOpen_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(virtualChannelOpen_result)
virtualChannelOpen_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TReturnVirtualChannelOpen, None], None, ),  # 0
)


class virtualChannelClose_args(object):
    """
    Attributes:
     - authToken
     - sessionId
     - virtualName
     - instance
    """


    def __init__(self, authToken=None, sessionId=None, virtualName=None, instance=None,):
        self.authToken = authToken
        self.sessionId = sessionId
        self.virtualName = virtualName
        self.instance = instance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.virtualName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.instance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('virtualChannelClose_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 2)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.virtualName is not None:
            oprot.writeFieldBegin('virtualName', TType.STRING, 3)
            oprot.writeString(self.virtualName.encode('utf-8') if sys.version_info[0] == 2 else self.virtualName)
            oprot.writeFieldEnd()
        if self.instance is not None:
            oprot.writeFieldBegin('instance', TType.I32, 4)
            oprot.writeI32(self.instance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(virtualChannelClose_args)
virtualChannelClose_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sessionId', None, None, ),  # 2
    (3, TType.STRING, 'virtualName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'instance', None, None, ),  # 4
)


class virtualChannelClose_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('virtualChannelClose_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(virtualChannelClose_result)
virtualChannelClose_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class disconnectSession_args(object):
    """
    Attributes:
     - authToken
     - sessionId
     - wait
    """


    def __init__(self, authToken=None, sessionId=None, wait=None,):
        self.authToken = authToken
        self.sessionId = sessionId
        self.wait = wait

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.wait = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('disconnectSession_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 2)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.wait is not None:
            oprot.writeFieldBegin('wait', TType.BOOL, 3)
            oprot.writeBool(self.wait)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(disconnectSession_args)
disconnectSession_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sessionId', None, None, ),  # 2
    (3, TType.BOOL, 'wait', None, None, ),  # 3
)


class disconnectSession_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('disconnectSession_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(disconnectSession_result)
disconnectSession_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class logoffSession_args(object):
    """
    Attributes:
     - authToken
     - sessionId
     - wait
    """


    def __init__(self, authToken=None, sessionId=None, wait=None,):
        self.authToken = authToken
        self.sessionId = sessionId
        self.wait = wait

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.wait = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logoffSession_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 2)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.wait is not None:
            oprot.writeFieldBegin('wait', TType.BOOL, 3)
            oprot.writeBool(self.wait)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logoffSession_args)
logoffSession_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sessionId', None, None, ),  # 2
    (3, TType.BOOL, 'wait', None, None, ),  # 3
)


class logoffSession_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('logoffSession_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(logoffSession_result)
logoffSession_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class enumerateSessions_args(object):
    """
    Attributes:
     - authToken
     - Version
    """


    def __init__(self, authToken=None, Version=None,):
        self.authToken = authToken
        self.Version = Version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('enumerateSessions_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.I32, 2)
            oprot.writeI32(self.Version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(enumerateSessions_args)
enumerateSessions_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Version', None, None, ),  # 2
)


class enumerateSessions_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TReturnEnumerateSession()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('enumerateSessions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(enumerateSessions_result)
enumerateSessions_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TReturnEnumerateSession, None], None, ),  # 0
)


class querySessionInformation_args(object):
    """
    Attributes:
     - authToken
     - sessionId
     - infoClass
    """


    def __init__(self, authToken=None, sessionId=None, infoClass=None,):
        self.authToken = authToken
        self.sessionId = sessionId
        self.infoClass = infoClass

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.infoClass = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('querySessionInformation_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 2)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.infoClass is not None:
            oprot.writeFieldBegin('infoClass', TType.I32, 3)
            oprot.writeI32(self.infoClass)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(querySessionInformation_args)
querySessionInformation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sessionId', None, None, ),  # 2
    (3, TType.I32, 'infoClass', None, None, ),  # 3
)


class querySessionInformation_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TReturnQuerySessionInformation()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('querySessionInformation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(querySessionInformation_result)
querySessionInformation_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TReturnQuerySessionInformation, None], None, ),  # 0
)


class startRemoteControlSession_args(object):
    """
    Attributes:
     - authToken
     - sourceLogonId
     - targetLogonId
     - HotkeyVk
     - HotkeyModifiers
     - flags
    """


    def __init__(self, authToken=None, sourceLogonId=None, targetLogonId=None, HotkeyVk=None, HotkeyModifiers=None, flags=None,):
        self.authToken = authToken
        self.sourceLogonId = sourceLogonId
        self.targetLogonId = targetLogonId
        self.HotkeyVk = HotkeyVk
        self.HotkeyModifiers = HotkeyModifiers
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sourceLogonId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.targetLogonId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.HotkeyVk = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.HotkeyModifiers = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('startRemoteControlSession_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sourceLogonId is not None:
            oprot.writeFieldBegin('sourceLogonId', TType.I32, 2)
            oprot.writeI32(self.sourceLogonId)
            oprot.writeFieldEnd()
        if self.targetLogonId is not None:
            oprot.writeFieldBegin('targetLogonId', TType.I32, 3)
            oprot.writeI32(self.targetLogonId)
            oprot.writeFieldEnd()
        if self.HotkeyVk is not None:
            oprot.writeFieldBegin('HotkeyVk', TType.BYTE, 4)
            oprot.writeByte(self.HotkeyVk)
            oprot.writeFieldEnd()
        if self.HotkeyModifiers is not None:
            oprot.writeFieldBegin('HotkeyModifiers', TType.I16, 5)
            oprot.writeI16(self.HotkeyModifiers)
            oprot.writeFieldEnd()
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 6)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(startRemoteControlSession_args)
startRemoteControlSession_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sourceLogonId', None, None, ),  # 2
    (3, TType.I32, 'targetLogonId', None, None, ),  # 3
    (4, TType.BYTE, 'HotkeyVk', None, None, ),  # 4
    (5, TType.I16, 'HotkeyModifiers', None, None, ),  # 5
    (6, TType.I32, 'flags', None, None, ),  # 6
)


class startRemoteControlSession_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('startRemoteControlSession_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(startRemoteControlSession_result)
startRemoteControlSession_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class stopRemoteControlSession_args(object):
    """
    Attributes:
     - authToken
     - sourceLogonId
     - targetLogonId
    """


    def __init__(self, authToken=None, sourceLogonId=None, targetLogonId=None,):
        self.authToken = authToken
        self.sourceLogonId = sourceLogonId
        self.targetLogonId = targetLogonId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sourceLogonId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.targetLogonId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stopRemoteControlSession_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sourceLogonId is not None:
            oprot.writeFieldBegin('sourceLogonId', TType.I32, 2)
            oprot.writeI32(self.sourceLogonId)
            oprot.writeFieldEnd()
        if self.targetLogonId is not None:
            oprot.writeFieldBegin('targetLogonId', TType.I32, 3)
            oprot.writeI32(self.targetLogonId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stopRemoteControlSession_args)
stopRemoteControlSession_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sourceLogonId', None, None, ),  # 2
    (3, TType.I32, 'targetLogonId', None, None, ),  # 3
)


class stopRemoteControlSession_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stopRemoteControlSession_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stopRemoteControlSession_result)
stopRemoteControlSession_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class sendMessage_args(object):
    """
    Attributes:
     - authToken
     - sessionId
     - title
     - message
     - style
     - timeout
     - wait
    """


    def __init__(self, authToken=None, sessionId=None, title=None, message=None, style=None, timeout=None, wait=None,):
        self.authToken = authToken
        self.sessionId = sessionId
        self.title = title
        self.message = message
        self.style = style
        self.timeout = timeout
        self.wait = wait

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.style = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.wait = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendMessage_args')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 2)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 4)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.style is not None:
            oprot.writeFieldBegin('style', TType.I32, 5)
            oprot.writeI32(self.style)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 6)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.wait is not None:
            oprot.writeFieldBegin('wait', TType.BOOL, 7)
            oprot.writeBool(self.wait)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendMessage_args)
sendMessage_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'sessionId', None, None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'message', 'UTF8', None, ),  # 4
    (5, TType.I32, 'style', None, None, ),  # 5
    (6, TType.I32, 'timeout', None, None, ),  # 6
    (7, TType.BOOL, 'wait', None, None, ),  # 7
)


class sendMessage_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sendMessage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sendMessage_result)
sendMessage_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs

